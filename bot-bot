/*var currentUser = document.getElementsByClassName('user')[0].innerText;
var checkUser = false;
var authenUser = '';
$.get('https://raw.githubusercontent.com/EVNEVN/yobit/master/bot-users', function (datauserrr, status) {}).done(function (datauserrr) {
    authenUser = JSON.parse(datauserrr);
    for (iiiii = 0; iiiii < authenUser.length; iiiii++)
    if (authenUser[iiiii] == currentUser) checkUser = true;
    if (checkUser == true) {
//===================================================================
*/
//> Функции бота и ядро бота

// Все функции
var botFunc = {

	// func -> расчет коеф. умножения\деления ставки 
	calcKoef: function(num) {
		var info =  num / 100 + 1,
			inf = num.toString(),
			cnt = inf.length,
			replace,
			o1,
			o2;
			
		if(cnt >= 3) {
			replace = info.toString().split('.');
			o1 = cnt - 2;
			o2 = cnt - 1;	
			info = Number(o1 == '0' && o2 == '0' ? replace[0] : replace[0] + '.' + inf[o1] + inf[o2]);
		}
		else
			info = Number('1.' + (cnt == 1 ? '0' + inf : inf));
		
		return !isNaN(num) ? info : '(?)';
	},
	
	// func -> активирует активные поля настроек
	actSetting: function() {
		var thisSetting = botCfg,
			keysSetting = Object.keys(thisSetting),
			keysCount = keysSetting.length,
			thisKey,
			block = $('.botSetting'),
			divFirst = block.children('div.leftLine'),
			divLast = block.children('div.rightLine');
		
		for(var i = 0; i < keysCount; i++) {
			thisKey = keysSetting[i];
			
			// Галочки
			if(i == 13 || i == 15 || i === 22 || i === 23 || i === 24 || i == 26 || i == 28) {
				
				if(thisSetting[thisKey] == 1) // выставляем галочку
					$('#cfg_' + thisKey).click();
					
				if(i == 13 && thisSetting[thisKey] == 0)
					divLast.children('div:first').children('p:eq(1)').hide();
				
				if(i == 15 && thisSetting[thisKey] == 0)
					divLast.children('div:first').children('p:eq(3)').hide();
                
                if(i == 26 && thisSetting[thisKey] == 0)
                    divLast.children('div:first').children('p:eq(1), p:eq(2)').hide();

			}
			// Поля для выбора
			else if(i == 0 || i == 3 || i == 5 || i == 7 || i == 17 || i == 19 || i == 25) {
				
				$('#cfg_' + thisKey).val(thisSetting[thisKey]);
				
				if(i != 0) {
					
					if(i == 7) {
						divFirst.children('div:eq(3)').children('p').hide();
						divFirst.children('div:eq(3)').children('p:first').show();
						divFirst.children('div:eq(3)').children('p:eq(' + thisSetting[thisKey] + ')').show();
					}
					else {
						
						if(i == 3) {
							
							if(thisSetting[thisKey] == 0)
								divFirst.children('div:eq(1)').children('p:last').hide();
								
							$('#inf_winRate').val((thisSetting[thisKey] == 1 ? '/' : 'x') + botFunc.calcKoef( thisSetting.winRate ) );
							
						}
						else if(i == 5) {
								
							if(thisSetting[thisKey] == 0)
								divFirst.children('div:eq(2)').children('p:last').hide();
							
							$('#inf_loseRate').val((thisSetting[thisKey] == 1 ? '/' : 'x') + botFunc.calcKoef( thisSetting.loseRate ) );
							
						}
						else if(i == 17 && thisSetting[thisKey] == 0)
							divLast.children('div:eq(1)').children('p:last').hide();
						else if(i == 19 && thisSetting[thisKey] == 0)
							divLast.children('div:eq(2)').children('p:last').hide();
                        
					}
				}
				else
					divFirst.children('div:first').children('p:eq(' + (thisSetting[thisKey] == 1 ? 2 : 1) + ')').hide();

			}
			else // поля ввода
				$('#cfg_' + thisKey).val(thisSetting[thisKey]).attr('placeholder', botConfig[thisKey]);
		}
		
	},
	
	// func -> сохранения настроек бота
	saveSetting: function() {
		var newSetting = botCfg,
			keysSetting = Object.keys(newSetting),
			keysCount = keysSetting.length,
			thisKey,
			thisValue;
			
		for(var i = 0; i < keysCount; i++) {
			thisKey = keysSetting[i];
			thisValue = $('#cfg_' + thisKey).val();
			
			if(i == 0 || i >= 3 && i <= 8 || i >= 10 && i <= 12 || i === 16 || i === 17 || i === 19 || i === 21 || i === 25 || i === 27)
				thisValue = Number(thisValue);
			
			if(i === 13 || i === 15 || i === 22 || i === 23 || i === 24|| i === 26 || i === 28)
				thisValue = $('#cfg_' + thisKey + ':checked').val() == 'on' ? 1 : 0;
			
			newSetting[thisKey] = thisValue;
		}
		
		// Сохраняем настройки в локальном хранилище
		localStorage.botSetting = JSON.stringify(newSetting);
		
		// Обвноялем текущее настройки до сохрненных
		botCfg = newSetting;
		
		// Сбрасываем поток игры
		botFunc.actButton(4);
		
	},
	
	// func -> возращает текущее настройки бота
	loadSetting: function() {
		if(localStorage.botSetting === undefined)
			localStorage.botSetting = JSON.stringify(botConfig);
		
		return $.parseJSON(localStorage.botSetting);
	},
	
	// Активируем глобальное действие
	actButton: function(run = 4) {
		$('#botActSL, #botActSH, #botActPS, #botActPP, #botActSW').removeClass('act');
		$('input[run="' + run + '"]').toggleClass('act');
		
		botThis.lastVarRun = botThis.varRun;
		botThis.varRun = run;
		
		if(run == 1 || run == 2)
			botThis.firstClick = 1;
		
		if(run != 3 && run != 4) {
			
			$('.dice_htable tr:first td:last').hide();
			$('.dice_htable tr:last td:last').hide();
			$('.botGG p:eq(2)').hide();
			$('#botDataBet').attr('disabled', '');
			$('input.bet').attr('disabled', '');
			
		}
		else {
			
			$('.dice_htable tr:first td:last').show();
			$('.dice_htable tr:last td:last').show();
			$('.botGG p:eq(2)').show();
			$('#botDataBet').removeAttr('disabled');
			$('input.bet').removeAttr('disabled');
			
		}
	
	},
	
	// func-> ставит ставку и жмет больше\меньше
	play: function(act) {
		var bet = $('#botDataBet').val(),
			prize = botFunc.fixed(+bet * 2);
		
		$('input.bet').val(bet);
		$('.prize').text(prize);
		$('.dice_htable input.clDicePlay:eq(' + act + ')').click();
	
	},
	
	// func-> обновление всей информации об игре
	updateInfoAll: function() {
		botFunc.updateInfoLHV();
		botFunc.updateInfoLHG();
		botFunc.updateStatistic();
		
		if(botThis.running > 0)
			botFunc.lastTr((botThis.actGame == 1 ? 'orange' : 'blue'));
	},
	
	// func-> переводит число в "сатоши"
	fixed: function(num) {
	
	    var strArr = [],
	        newArr = [],
	        lastIndex = 0,
	        cnt = 0;
	        
	    num = isNaN(num) || num === '' ? '0.00000001' : Number(num).toFixed(8);
	    num = num.toString();
	    
	    cnt = num.length;
	    
	    if(cnt > 1) {
	    
	        for(var i = 0; i < cnt; i++)
	            strArr[i] = num[i];
	        
	        strArr.reverse();
	        
	        if(strArr[0] === '0') {
	        
	            for(var j = 0; j < cnt; j++) {
	            
	                if(strArr[j] !== '0') {
	                
	                    lastIndex = j;
	                    
	                    break;
	                
	                }
	            }
	            
	            for(var x = lastIndex; x < cnt; x++)
	                newArr.push(strArr[x]);
	            
	            newArr.reverse();
	            
	            num = '';
                
                for(var e = 0; e < newArr.length; e++)
                    num += newArr[e];
            
            }
        
        }
        
        delete strArr;
        delete newArr;
                
        return num;
        
	},
	
	//
	lastTr(color = 'blue', blockCheck) {
		
		// Активный DOM блока последней ставки
		blockCheck = $('#DataTables_Table_0 tr:eq(1)');
		
		// Проверяет окрашена ли уже последняя ставка, если нет, то окращивает ее, согласно режиму игры
		if(blockCheck.hasClass('blue') == false && blockCheck.hasClass('yellow') == false)
			$('#DataTables_Table_0 tr:eq(1)').addClass('bot_' + color);
			
	},
	
	//
	lastStatBet: function(param = 0) {
		var cellLastBet = $('#DataTables_Table_0 tr:eq(1) td:last').text(),
			result;
        
        if(botData.roll[0] == 0)
            botData.roll[0] = parseInt($('input.clDicePlay:eq(0)').val().replace(/[^\d;]/g, ''));
        
        if(botData.roll[1] == 0)
            botData.roll[1] = parseInt($('input.clDicePlay:eq(1)').val().replace(/[^\d;]/g, ''));
        
		if(param === 0) // win \ lose
			result = cellLastBet.substr(0, 1) === "+" ? true : false;
		else if(param === 1) // bet count
			result = Number(cellLastBet.substr(1));
		else if(param === 2) { // reall lo-hi
			result = Number($('#DataTables_Table_0 tr:eq(1) td:eq(6)').text());
			
			if(result > botData.roll[0] && result < botData.roll[1])
				result = 3;
			else if(result < botData.roll[0])
				result = 1;
			else
				result = 2;
		}
		else if(param === 3) // last id roll
			result = $('#DataTables_Table_0 tr:eq(1) td:first').text();	
		else
			result = false;
	
		return result;
	},
	
	//
	updateStatistic: function() {
		
		botData.profit = botFunc.fixed(botFunc.checkBalance() - Number(botData.balance));
		
		// win
		if(botFunc.lastStatBet()) 
			botThis.roundWinBet += botFunc.lastStatBet(1);
						
		// lose
		else 
			botThis.roundLoseBet += botFunc.lastStatBet(1);
					
		// вычесляем просадку
		botThis.sag = botFunc.fixed(botThis.roundWinBet - botThis.roundLoseBet);
		
		if(botThis.sag >= 0) {
			
			if(botCfg.cinf)
                console.log('Режим сброса до выигрыша - '+ botFunc.fixed(botCfg.mwRate) + '\nТекущий плюс до сброса:' + botFunc.fixed(botThis.sag));
			
			if(botData.sag != 0)
				botData.sag = 0;
			
			if(botCfg.ddAct == 1 && botCfg.abortMW == 0 && botCfg.abortCW == 1 && Number(botThis.roundWinBet) > 0) {
				botThis.sag = 0;
				botThis.roundWinBet = 0;
				botThis.roundLoseBet = 0;
			}
		}
		else
			botData.sag = botThis.sag;
		
		if(botCfg.cinf)
            console.log('Sag: ' + botThis.sag + ' | Limit: ' + botFunc.fixed(botCfg.mwRate) + ' | Result: ' + (botThis.sag >= Number(botCfg.mwRate)));
			
		if(botCfg.cinf)
            console.log('preID: ' + botThis.lastID + ' | Sag: ' + botFunc.fixed(botThis.sag) + ' | Sag limit: ' + botFunc.fixed(botCfg.ddLimit) + ' | Result: ' + ( botData.sag < 0 && Math.abs(botData.sag) > Number(botCfg.ddLimit) ) );
		
		if((botThis.sag >= 0 || botCfg.abortMW) && botThis.sag >= Number(botCfg.mwRate)) {
			
			botThis.roundWinBet = 0;
			botThis.roundLoseBet = 0;
			
		}
		
		botFunc.readyStatistic();
        
	},
	
	//
	clearStatistic: function() {
		
		botThis.running = 0;
		botThis.lastID = 0;
		botThis.minBet = botCfg.betType == 1 ? botFunc.fixed(botCfg.betNumber) : botFunc.fixed(botFunc.checkBalance() / 100 * Number(botCfg.betPercent));
		botThis.bet = botThis.minBet;
		botThis.sag = 0;
		botThis.roundWinBet = 0;
		botThis.roundLoseBet = 0;
		botData.balance = botFunc.checkBalance();
		botData.profit = 0;
		botData.sag = 0;
		botData.time = 0;
        
        botData.maxRedBet = 0;
        
        botThis.redRound = 0;
        
        botThis.mod3_stp = 0;
        botThis.mod3_sum = 0;
			
		botFunc.readyStatistic();
	},
	
	// Random
	random: function(min, max) {
		return Math.floor(Math.random() * (max - min + 1) + min);
	},
	
	// Func -> Обновляет визуальную информацию "статистики"
	readyStatistic: function() {
		$('#botDataBalance').text(botData.balance);
		$('#botDataProfit').text(botData.profit);
		$('#botDataSag').text(botData.sag);
		$('#botDataTime').text(botFunc.fixedTime(botData.time));
        $('#botDataMaxBet').text(botData.maxBet);
        $('#botDataMaxRedBet').text(botData.maxRedBet);
	},
	
	//
	updateInfoLHV: function() {
		var cnt = botData.vlh.length - 1,
			new_arr = [botFunc.lastStatBet(2)];
		
		for(var i = 0; i < cnt; i++)
			new_arr[i+1] = botData.vlh[i];
		
		botData.vlh = new_arr;
		botFunc.readyInfoLHV();
	},
	
	//
	readyInfoLHV: function() {
		var info = '',
			color,
			lohi;
		
		for(var i = 0; i < botData.vlh.length; i++) {
			
			if(botData.vlh[i] == 1) {
				color = 'green';
				lohi = 'LO';
			}
				
			if(botData.vlh[i] == 2) {
				color = 'red';
				lohi = 'HI';
			}
				
			if(botData.vlh[i] == 3) {
				color = 'yellow';
				lohi = '!';
			}
				
			info += botData.vlh[i] != 0 ? '<li class="' + color + '">' + lohi + '</li>' : '<li>?</li>';
		
			$('.botBox .botLHV ul').html(info);
		}
	},
	
	//
	updateInfoLHG: function() {
		
		if(botFunc.lastStatBet(2) == 1)
			botData.glh[0]++;
		if(botFunc.lastStatBet(2) == 2)
			botData.glh[2]++;
		
		botData.glh[1] = botData.glh[0] - botData.glh[2];
		botFunc.readyInfoLHG();
	},
	
	//
	readyInfoLHG: function() {
	
		$('.botLHG div:last span:first').text(botData.glh[0]);
		$('.botLHG div:last span:last').text(botData.glh[2]);
		
		if(botData.glh[1] == 0)
			$('.botLHG div:last span:eq(1)').text(0).removeAttr('class');
		else if(botData.glh[1] > 0)
			$('.botLHG div:last span:eq(1)').text(Math.abs(botData.glh[1])).attr('class', 'green');
		else
			$('.botLHG div:last span:eq(1)').text(Math.abs(botData.glh[1])).attr('class', 'red');
	},
	
	// func -> Определение времени
	fixedTime: function(time = 0) {
		var d = Math.floor(time / 86400),
			h = Math.floor(time / 3600)  % 23,
			m = Math.floor(time / 60)  % 60,
			s = time % 60;
	
		return (d > 0 ? d + 'д. ' : '') + (d > 0 || h > 0 ? h + 'ч. ' : '') + (d > 0 || h > 0 || m > 0 ? m + 'м. ' : '') + s + 'с.';
	},
	
	// получаем баланс
	checkBalance: function() {
		var arr = $('.chosen-single:first span').text().split(' ');
		
		return botFunc.fixed(arr[3] === '-' ? arr[4] : arr[3]);
	},
	
	// Сброс до базовой ставки
	abort: function() {
		
		if(botCfg.betType == 1)
			botThis.minBet = botFunc.fixed(botCfg.betNumber);
		else {
			botThis.minBet = botFunc.fixed(botFunc.checkBalance() / 100 * Number(botCfg.betPercent));
			
			if(botThis.minBet == '0.00000000')
				botThis.minBet = botFunc.fixed('0.00000001');
			
		}
		
		if($('#botDataBet').val() != botThis.minBet)
			botThis.bet = botThis.minBet;
		
		if(botCfg.abortCW == 1)
			botThis.abortWinCnt = 0;
	},
	
	// основная функция игры бота
	core: function(time) {
		
		if(botThis.varRun != 4 && botThis.varRun != 0) {
			
			if(botThis.varRun != 3 && botThis.stop == 1)
				botThis.lastID = 0;
			
			if(botFunc.checkBalance() == 0)
				botFunc.actButton(4);
			
			if(botThis.varRun != 3 && botThis.actGame != 2)
				botThis.actGame = 2;
			
			if(botThis.lastVarRun == 4 && botThis.lastID != 1)
				botThis.lastID = 1;
			
			if(botFunc.lastStatBet(3) != botThis.lastID) {
				
				if(botThis.lastVarRun != 4)
					botFunc.updateInfoAll();
			
				botThis.lastID = botFunc.lastStatBet(3);
			
				if(botThis.running == 0) {
					
					botData.balance = botFunc.checkBalance();
					
					// минимальная ставка
					botFunc.abort();
				
					// кнопка по которой бить
					botThis.actBut = botThis.varRun == 1 ? 0 : 1;
				}
				else {
				
					// берем ставку которую имеем
					botThis.bet = $('#botDataBet').val();
					
					if(botThis.varRun == 3) {
						if(botThis.stop != 1)
							botThis.stop = 1;
						
						if(botThis.noDie != 1)
							botThis.noDie = 1;
						
					}
					else {
                        
						if(botThis.stop != 0) {
							
                            botThis.stop = 0;
							
							// кнопка по которой бить
							botThis.actBut = botThis.varRun == 1 ? 0 : 1;
							
						}

						if(botThis.noDie != 0) {
							
							botThis.lastDiePauseAbort = botThis.bet == botThis.minBet ? 1 : 0;
							botThis.noDie = 0;
							
						}
							
					}
					
					if(botThis.lastVarRun != 3 && botThis.running != 0 && botThis.stop != 1) {
				
						//> setting hi-lo
				
						// с кнопки
						if(botCfg.lhAct == 1 && botCfg.lhRoll != 0) { 
						
							if(botThis.running == 1)
								botThis.lhRollCnt = 0;
					
							botThis.lhRollCnt++;
					
							if(botThis.lhRollCnt == botCfg.lhRoll) {
								botThis.lhRollCnt = 0;
								botThis.actBut = botThis.actBut == 1 ? 0 : 1;
							}
			
						}
						else if(botThis.lhRollCnt != 0)
							botThis.lhRollCnt = 0;
				
						// по циклу
						if(botCfg.lhAct == 2) {
					
							if(botThis.running == 1 || botCfg.lhRound.length <= botThis.lhRoundIndex)
								botThis.lhRoundIndex = 0;
					
							botThis.actBut = botCfg.lhRound[botThis.lhRoundIndex] == 'L' ? 0 : 1;
					
							botThis.lhRoundIndex++;
					
						}
						else if(botThis.lhRoundIndex != 0)
							botThis.lhRoundIndex = 0;
				
						// Случайной
						if(botCfg.lhAct == 3) {
					
							botThis.randBut = botFunc.random(0, 1);
					
							if(botThis.running == 1) {
							
								botThis.randLast = botThis.randBut;
								botThis.randLastCnt = 0;
							
							}
					
							if(botThis.running >= 1) {
						
								if(botThis.randLast == botThis.randBut)
									botThis.randLastCnt++;
								else
									botThis.randLastCnt = 1;
						
								if(botThis.randLastCnt > botCfg.lhRand) {
							
									botThis.randBut = botThis.randBut == 1 ? 0 : 1;
									botThis.randLastCnt = 1;
							
								}
						
								botThis.randLast = botThis.randBut;
								botThis.actBut = botThis.randLast;
						
							}
						}
						else if(botThis.randLastCnt != 0) {
                            
							botThis.randBut = 0;
							botThis.randLast = 0;
							botThis.randLastCnt = 0;
                            
						}
				
						if(botCfg.lhAct == 4) { // после выигрыш
					
							if(botThis.running == 1)
								botThis.lhWinCnt = 0;
					
							if(botFunc.lastStatBet())
								botThis.lhWinCnt++;
							else
								botThis.lhWinCnt = 0;
					
							if(botThis.lhWinCnt >= botCfg.lhWin) {
								botThis.actBut = botThis.actBut == 1 ? 0 : 1;
								botThis.lhWinCnt = 0;
							}
						
						}
						else if(botThis.lhWinCnt != 0)
							botThis.lhWinCnt = 0;
				
						if(botCfg.lhAct == 5) { // после проигрыш
					
							if(botThis.running == 1)
								botThis.lhLoseCnt = 0;
					
							if(botFunc.lastStatBet())
								botThis.lhLoseCnt = 0;
							else
								botThis.lhLoseCnt++;
					
							if(botThis.lhLoseCnt >= botCfg.lhLose) {
								botThis.actBut = botThis.actBut == 1 ? 0 : 1;
								botThis.lhLoseCnt = 0;
							}
											
						}
						else if(botThis.lhLoseCnt != 0)
							botThis.lhLoseCnt = 0;
                        
                        if(botCfg.lhAct == 6) {
                            
                            if(botData.vlh[29] == 0) {
                                
                                botThis.actBut = botFunc.random(0, 99) < botData.roll[0] ? 0 : 1;
                                
                            }
                            else {
                                
                                if(botCfg.lhCopy == 1)
                                    botThis.actBut = botData.vlh[0] == 3 ? (botFunc.random(0, 99) < botData.roll[0] ? 0 : 1) : botData.vlh[0] - 1;
                                
                                if(botCfg.lhCopy == 2)
                                    botThis.actBut = botData.vlh[0] == 3 ? (botFunc.random(0, 99) > botData.roll[1] ? 0 : 1) : (botData.vlh[0] == 2 ? 0 : 1);

                                
                                if(botCfg.lhCopy == 3)
                                    botThis.actBut = botData.vlh[29] == 3 ? (botFunc.random(0, 99) < botData.roll[0] ? 0 : 1) : botData.vlh[29] - 1;

                                if(botCfg.lhCopy == 4)
                                    botThis.actBut = botData.vlh[29] == 3 ? (botFunc.random(0, 99) > botData.roll[1] ? 0 : 1) : (botData.vlh[29] == 2 ? 0 : 1)
                                    
                            }
                            
                        }
                        
					}
					
					//botThis.lastDiePauseAbort != 1 || 
					if(botThis.lastVarRun != 3 && botThis.noDie != 1 || botThis.varRun == 3) {
							
						// win
						if(botFunc.lastStatBet()) {
					
							if(botCfg.winAct != 0)
								botThis.bet = botFunc.fixed(botCfg.winAct == 1 ? botThis.bet / botFunc.calcKoef(botCfg.winRate) : botThis.bet * botFunc.calcKoef(botCfg.winRate));
                            
                            botThis.maxRed = 0;
                            
                            if(botCfg.abortCRA)
                                botThis.redRound = 0;
                            
                        }
						// lose
						else {
					
							if(botCfg.loseAct != 0)
								botThis.bet = botFunc.fixed(botCfg.loseAct == 1 ? botThis.bet / botFunc.calcKoef(botCfg.loseRate) : botThis.bet * botFunc.calcKoef(botCfg.loseRate));
                            
                            botThis.maxRed++;
                            
                            botThis.redRound++;
                            
                            if(botThis.maxRed > botData.maxRedBet)
                                botData.maxRedBet++;
                            
						}
					
					}
					
					// сбрасываем переключатель после паузы
					if(botThis.lastDiePauseAbort == 1)
						botThis.lastDiePauseAbort = 0;
					
					// сбрасываем до начальной ставки
					if(botThis.sag >= 0) {
						
						// сброс при достижении выигрыша
						if(botCfg.abortMW == 1) {
							
							if(Number(botThis.sag) >= Number(botCfg.mwRate))
								botFunc.abort();
							
						}
                        
						// Сброс, если не установлено никаких сбросов
						if(botCfg.abortMW == 0 && botCfg.abortCW == 0 && botCfg.profitAct == 0 && botCfg.ddAct == 0)
							botFunc.abort();
						
						// Stop Win
						if(botThis.varRun == 5) {
							botThis.lastVarRun = botThis.varRun;
							
							botFunc.clearStatistic();
							botFunc.actButton(4);
							
						}
						
					}
					
					// сброс при достижении кол-во зеленых
					if(botCfg.abortCW == 1) {
							
						if(!botThis.abortWinCnt)
							botThis.abortWinCnt = 0;
						
						if(botThis.sag >= 0) {
							
							if(botFunc.lastStatBet() == true) {
								
								if(botThis.abortWinCnt == 0)
									botThis.abortWinCnt = 1;
								else
									botThis.abortWinCnt++;
							}
							else
								botThis.abortWinCnt = 0;

						}
						else
							botThis.abortWinCnt = 0;
						
						
						if(botThis.abortWinCnt >= Number(botCfg.cwRate)) {
							
							
							console.log('сброс - Win: ' + botThis.abortWinCnt + ' | Limit: ' + Number(botCfg.cwRate));
							
							botFunc.abort();
							
							botThis.abortWinCnt = 0;
						}
							
					}
					
                    // сброс при достижении кол-во красных
					if(botCfg.abortCR == 1) {
						
						if(botThis.redRound >= Number(botCfg.crRate)) {

							console.log('пауза - Red-bet: ' + botThis.redRound + ' | Limit: ' + Number(botCfg.crRate));
							
                            botThis.redRound = 0;
                            
							botFunc.actButton(3);
							botFunc.alert();
                            
						}
							
					}
                    
					// при достижении профита
					if(botCfg.profitAct != 0) {
						
						if(Number(botCfg.profitLimit) < Number(botData.profit)) {
							
							if(botCfg.profitAct == 1) {
								botFunc.actButton(3);
								botFunc.alert();
							}
							else if(botCfg.profitAct == 2) {
								
								botFunc.abort();
							}
								
							else {
								botFunc.clearStatistic();
								botFunc.actButton(4);
							}
								
						}
						
					}
					
					// при достижении просадки
					if(botCfg.ddAct != 0) {
						
						if(botData.sag < 0 && Math.abs(botData.sag) > Number(botCfg.ddLimit)) {
							
							if(botCfg.ddAct == 1) {
								botFunc.actButton(3);
								botFunc.alert();
							}
							else if(botCfg.ddAct == 2)
								botFunc.abort();
							else {
								botFunc.clearStatistic();
								botFunc.actButton(4);
							}
								
						}
						
					}
					
                    // Расширение: Трёшка
					if(botCfg.mod3 != 0) {
					    
                        if(!botFunc.lastStatBet() && botThis.mod3_stp === 0) {
                            
                            botThis.mod3_stp++;
                            botThis.mod3_sum++;
                            
                        }
                        else if(botThis.mod3_stp > 0) {
                            
                            botThis.mod3_stp++;
                            
                            if(!botFunc.lastStatBet())
                                botThis.mod3_sum++;
                        
                        }
                        
                        if(botThis.mod3_stp > 0 && botCfg.cinf) {
                        
                            console.log('Инфо: расширение "Трёшка"');
                            console.warn('Степ:' + botThis.mod3_stp);
                        
                        }
                       
                        if(botThis.mod3_stp === 3) {
                            
                            if(botThis.mod3_sum === 2)
                                botThis.bet = botFunc.fixed(parseFloat(botThis.bet) * 2);
                            
                            if(botThis.mod3_sum === 3)
                                botThis.bet = botFunc.fixed(parseFloat(botThis.bet) * 4);
                            
                            botThis.mod3_stp = 0;
                            botThis.mod3_sum = 0;
                        
                        }
					    
					}
					
					// пауза если ставка выше баланса
					if(Number(botThis.bet) > botFunc.checkBalance())
						botFunc.actButton(3);
				}
				
				// если поделило меньше минимальной ставки
				botThis.bet = Number(botThis.minBet) > Number(botThis.bet) ? botThis.minBet : botThis.bet;
				
                // вычесляем максимальную ставку в течении игры
                if(parseFloat(botThis.bet) > parseFloat(botData.maxBet))
                    botData.maxBet = botThis.bet;
                
				// вставляем ставку
				$('#botDataBet').val(botThis.bet);
				
				// смена играющей кнопки вовремя игры
				if((botThis.lastVarRun == 1 || botThis.lastVarRun == 2) && botThis.firstClick == 1) {
					
					botThis.actBut = botThis.varRun == 1 ? 0 : 1;
					botThis.firstClick = 0;
					
				}
					
				botThis.playActGame = 1;
				
				botThis.running++;
				
				if(botThis.lastVarRun != botThis.varRun)
					botThis.lastVarRun = botThis.varRun;
			
			}
			
		}
		else {// Stop
			
			if(botThis.lastVarRun != botThis.varRun) {
				botThis.lastVarRun = botThis.varRun;
		
				botFunc.clearStatistic();
				
				$('input.bet').val(botThis.minBet);
			}
			
			if(botThis.actGame == 1 && botThis.goGameActStop == 1 && botFunc.lastStatBet(3) != botThis.lastID) {
				
				botThis.goGameActStop = 0;
				botThis.lastID = botFunc.lastStatBet(3);
				
				if(botThis.lastVarRun != 3) {
					botFunc.updateInfoLHV();
					botFunc.updateInfoLHG();
				}
				
			}
			
			if(botCfg.cinf)
                console.log('stop');
            
		}
	
	},
	
	// Func -> Бьет по клавишам HI\LO, если режим игры активен
	game: function(time) {
		
		// Обновляем интервал времени
		time = botFunc.random(999, 1111) + botCfg.interval;
		
		// Делает ставку, если активный режимы игры: Start HI\LO, Stop Win
		if(botThis.varRun != 3 && botThis.varRun != 4) {
			
			// Считает время, если режим игры не "пауза"
			if(botThis.varRun != 3)
				botData.time += Math.floor(time / 1000);
			
			// Делает ставку
			if(botThis.playActGame == 1) {
				
				botFunc.play(botThis.actBut);
				
				if(botThis.err > 0)
					botThis.err = 0;
				
			}
			else {
                
                if(!botThis.err)
					botThis.err = 1;
				else
				botThis.err++;
				
				if(botThis.err % 50 == 0) {
					
					console.log('Ожидаем старта.. Рэбут, попытка №' + Math.floor(botThis.err / 50));
					
					botFunc.play(botThis.actBut);
				}
                
			}
			
			// Ставим, чтоб не бил по клавишам
			if(botThis.playActGame != 0)
				botThis.playActGame = 0;
            
		}
			
		// Запускаем функцию заново, с другим интервалом прохода
		setTimeout(function() {botFunc.game();}, time);

	},
	
	// Func -> Обновление информации статистики и выполнение действий согласно ядра бота
	update: function() {
		
		// Начинает обновление, если бот не был только что запущенным
		if(botThis.varRun != 0) {
			
			// Выполняем процессы ядра бота
			botFunc.core();
			
			// Обновляем информацию о текущем балансе
			botThis.balance = botFunc.checkBalance();
			
			// Обновляем визуальные данные статистики
			botFunc.readyStatistic();
			
			// Окращиваем последнию ставку в цвет активной игры
			//botFunc.lastTr(botThis.actGame == 1 ? 'orange' : 'blue');
		}
		else
			botFunc.actButton();
		
		// Циклируем выполнение обновления
		setTimeout(function() {botFunc.update();}, 100);
		
	},
	
	// func -> Активация всех функций
	start: function() {
		
		// Активирем активные настройки в окне настрояк, согласно текщим настройкам
		botFunc.actSetting();
		
		// Делаем предварительный запуск горизонтального индекатора 
		botFunc.readyInfoLHV();
		
		// Делаем предварительный запуск горизонтального индекатора 
		botFunc.readyInfoLHG();
		
		// Делаем предварительный запуск блока статистики
		botFunc.readyStatistic();
		
		// Запускаем игровой модуль
		botFunc.game();
		
		// Запускаем мудуль обновления информации и мгновенной обработки процессов ядра
		botFunc.update();
		
	},
	
	// уведомление
	alert: function() {
		
        if(botCfg.apsa) {
            
            window.audio = {};
            window.audio.alert = new Audio();
            window.audio.alert.src = "http://1020287.slavhist.web.hosting-test.net/alert.mp3";
            window.audio.alert.play();
            
        }
        
		return false;
	}
	
};

// Информационные данные
var botData = {
	balance: 0,
	profit: 0,
	sag: 0,
	time: 0,
    maxBet: 0,
    maxRedBet: 0,
    roll: [0, 0],
	glh: [0, 0, 0],
	vlh: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
};

// Данные по текущей игре
var botThis = {
	sag: 0,
	lastID: 0,
	lastVarRun: 0,
	varRun: 0,
	actGame: 0,
	running: 0,
	roundWinBet: 0,
	roundLoseBet: 0,
    maxRed: 0,
    redRound: 0,
	stop: 0,
    mod3_stp: 0,
    mod3_sum: 0
};

// Загружаем текущее настройки бота
var botCfg = botFunc.loadSetting();

//==================================================

function cc_uu() {
	var currentETUserr = document.getElementsByClassName('user')[0].innerText;
	var checkETUserr = false;
	var authenETUserr = '';
	$.get('https://raw.githubusercontent.com/EVNEVN/yobit/master/bot-users', function (datauserr, status) {}).done(function (datauserr) {
    authenETUserr = JSON.parse(datauserr);
    for (iii = 0; iii < authenETUserr.length; iii++)
        if (authenETUserr[iii] == currentETUserr) checkETUserr = true;
    if (checkETUserr == true) {
    		
    	}else{
    		//run = false;
			alert('Unknown account! To use the bot, contact the developer!');
			//window.open('https://www.youtube.com/channel/UCI_HpN0R1GB9sZsVb1EqV-Q?view_as=subscriber');
			//window.location.reload();
		}
	});
}

//====================================================

function c_u() {
	var currentETUser = document.getElementsByClassName('user')[0].innerText;
	var checkETUser = false;
	var authenETUser = '';
	$.get('https://raw.githubusercontent.com/EVNEVN/yobit/master/bot-users', function (datauser, status) {}).done(function (datauser) {
    authenETUser = JSON.parse(datauser);
    for (iiii = 0; iiii < authenETUser.length; iiii++)
        if (authenETUser[iiii] == currentETUser) checkETUser = true;
    if (checkETUser == true) {
    		
    	}else{
    		//run = false;
			alert('Unknown account! To use the bot, contact the developer!');
			//window.open('https://www.youtube.com/channel/UCI_HpN0R1GB9sZsVb1EqV-Q?view_as=subscriber');
			//window.location.reload();
		}
	});
}

/*//=============================================
	} else { 
		//run = false;
		alert('Unknown account! To use the bot, contact the developer!');
		//window.open('https://www.youtube.com/channel/UCI_HpN0R1GB9sZsVb1EqV-Q?view_as=subscriber');
		//window.location.reload();
	}
});
*/
